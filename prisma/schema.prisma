// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Proof {
  id                String   @id @default(cuid())
  cid               String   @unique
  originalName      String
  size              Int
  type              String
  url               String
  proofHash         String   @unique
  topicId           String?
  sequenceNumber    Int?
  blockchainStatus  String   @default("not_configured")
  title             String?
  category          String?
  location          String?
  tags              String[]
  
  // AI Validation Fields
  aiValidationStatus    String?   // "pending", "completed", "failed"
  aiConfidenceScore    Decimal?   @db.Decimal(5,2) // 0.00 to 100.00
  aiEnvironmentalScore Decimal?   @db.Decimal(5,2) // 0.00 to 100.00
  aiSafetyScore        Decimal?   @db.Decimal(5,2) // 0.00 to 100.00
  aiDetectedObjects    String[]   // Array of detected objects
  aiDetectedLabels     String[]   // Array of detected labels
  aiTextContent        String[]   // Array of detected text
  aiSuggestedCategory  String?    // AI-suggested category
  aiValidationDetails  Json?      // Full validation response
  
  userId            String?
  ngoId             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User?    @relation(fields: [userId], references: [id])
  ngo               NGO?     @relation(fields: [ngoId], references: [id])

  @@index([userId])
  @@index([ngoId])
  @@index([category])
  @@index([aiValidationStatus])
  @@index([aiEnvironmentalScore])
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  walletAddress String?  // Hedera wallet address
  
  // Profile
  avatar        String?  // Profile picture URL
  bio           String?  // User bio
  
  // Stats
  totalProofs   Int      @default(0)
  totalImpact   Int      @default(0) // Impact score
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  proofs        Proof[]
  ngoMemberships NGOMember[]
  badges        UserBadge[]
  
  @@index([email])
  @@index([walletAddress])
}

model NGO {
  id            String   @id @default(cuid())
  name          String
  description   String?
  logo          String?  // Logo URL
  website       String?
  
  // Contact
  email         String?
  phone         String?
  address       String?
  
  // Stats
  totalProofs   Int      @default(0)
  totalMembers  Int      @default(0)
  totalImpact   Int      @default(0)
  
  // Verification
  isVerified    Boolean  @default(false)
  verifiedAt    DateTime?
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  proofs        Proof[]
  members       NGOMember[]
  
  @@index([name])
  @@index([isVerified])
}

model NGOMember {
  id            String   @id @default(cuid())
  userId        String
  ngoId         String
  role          String   @default("member") // member, admin, moderator
  
  // Timestamps
  joinedAt      DateTime @default(now())
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ngo           NGO      @relation(fields: [ngoId], references: [id], onDelete: Cascade)
  
  @@unique([userId, ngoId])
  @@index([ngoId])
  @@index([role])
}

model Category {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  icon          String?  // Icon name or URL
  color         String?  // Hex color code
  
  // Stats
  totalProofs   Int      @default(0)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([name])
}

model Badge {
  id            String   @id @default(cuid())
  name          String
  description   String?
  icon          String?  // Emoji or icon
  color         String?  // CSS color class
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  userBadges    UserBadge[]
  
  @@index([name])
}

model UserBadge {
  id            String   @id @default(cuid())
  userId        String
  badgeId       String
  awardedAt     DateTime @default(now())
  awardedBy     String   // Who awarded the badge (sponsor, system, etc.)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge         Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
  @@index([awardedAt])
}
